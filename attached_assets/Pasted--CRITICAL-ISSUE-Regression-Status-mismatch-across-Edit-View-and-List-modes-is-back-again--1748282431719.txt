🚨 CRITICAL ISSUE (Regression): Status mismatch across Edit, View, and List modes is back again.

📌 The Problem:
- ✅ Edit mode correctly displays the bill status based on payment and item receiving info.
- ❌ View mode shows incorrect or missing status (e.g., shows “Draft” even when fully paid).
- ❌ List mode also shows wrong or blank status.
- This status inconsistency is confusing and unacceptable in a production ERP environment.

---

### 🎯 Objective:
Rebuild the **entire status handling system from scratch (A to Z)** to ensure:
- Unified calculation logic
- Consistent status rendering in **Edit**, **View**, and **List**
- Mathematically accurate evaluation of both payments and item receipts

---

### ✅ Status Types to Implement:

| Status             | Condition                                                                 |
|--------------------|---------------------------------------------------------------------------|
| **Draft**           | No payment made AND no items received                                     |
| **Partially Paid**  | Some payment made, but less than total                                    |
| **Paid**            | Full payment made (total paid >= grand total)                             |
| **Partially Received** | Some items received, but not all                                       |
| **Received**        | All items received (received quantity == ordered quantity for all items)  |

✅ Composite Status:
- You may need to show combined status like "Paid & Received", or "Partially Paid & Received" based on business rules.

---

### 🧠 Step-by-Step Instructions for Developer:

1. **Create a shared utility function**:  
   - `calculateBillStatus(bill)` that receives the entire bill object.
   - Inside the function:
     - Convert `grandTotal`, `totalPaid` from cents to dollars if needed.
     - Loop through all `items[]` and compare `receivedQty` vs `orderedQty`.

2. **Apply the same function** in:
   - Edit view
   - View (read-only) page
   - List/summary page

3. **Do NOT rely on `bill.status` from the backend or database** unless you have confirmed it is always updated.
   - Instead, always compute status from:
     - `bill.totalPaid`
     - `bill.grandTotal`
     - `bill.items[]` with quantity and received quantity

4. **UI Binding**:
   - Confirm that all three components (Edit, View, List) have proper JSX/HTML blocks to render the calculated status.
   - Do not suppress rendering with faulty conditions (e.g., `if (!status) return null`).

5. **Ensure all currencies are properly normalized.**
   - e.g., If payment is stored in cents, make sure calculations are done in the same unit as `grandTotal`.

6. **Status Positioning**:
   - **Edit Mode**: Top-right or lower section — ✅ working.
   - **View Mode**: Clearly show the status, but NOT next to the bill number/title.
   - **List Mode**: Show status as a label in a visible column — no icons needed, only text (e.g., "Paid", "Partially Paid").

7. **Do NOT include unnecessary UI blocks like "Current Status" section** in Edit mode.

---

### ✅ Final Acceptance Criteria:

- Open a bill that is:
  - Fully unpaid + no received items → status must show "Draft"
  - Partially paid only → "Partially Paid"
  - Fully paid → "Paid"
  - Some items received → "Partially Received"
  - All items received → "Received"
  - Full payment + all items received → "Paid & Received"

- The **same status string** must appear in:
  - [ ] Edit View
  - [ ] View Page
  - [ ] Purchase Bill List

- No icons, only status text.
- View and List should never show stale, empty, or missing status.

---

Please treat this as a full rebuild instruction for the status module. Ensure accuracy, visual consistency, and unified business logic.
