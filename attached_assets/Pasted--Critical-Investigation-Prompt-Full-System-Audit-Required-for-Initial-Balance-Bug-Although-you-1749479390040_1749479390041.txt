üö® Critical Investigation Prompt: Full-System Audit Required for Initial Balance Bug

Although you've rebuilt the Initial Balance calculation system and introduced clean `toCents()` and `fromCents()` functions, the √ó10 scaling issue STILL persists. This clearly indicates the bug lies **elsewhere in the full data flow**.

To properly resolve this once and for all, you MUST now conduct a **full-system diagnostic trace** ‚Äî from input to final display ‚Äî and isolate where the unintended numeric transformation occurs.

---

### üîç Required Diagnostic Actions

1. **Trace and Log the ENTIRE Lifecycle of `initialBalance`:**

   #### Stage A: Raw Input
   - Console log what the user types in the input field.
   - Check both string and parsed number values.

   #### Stage B: Form State
   - Log what‚Äôs stored in the form state (e.g., Formik, useState).

   #### Stage C: Pre-Mutation
   - Log the exact value right before calling the mutation/API.
   - Confirm only one `*100` transformation happens here.

   #### Stage D: API/Backend Payload
   - Log what‚Äôs being sent to the backend.
   - Confirm backend receives expected value in cents.

   #### Stage E: Backend Storage (Database or Mock)
   - Log or inspect what‚Äôs actually stored (if using a mock DB or local state).
   - Check if there's any accidental transformation (e.g., √ó10) there.

   #### Stage F: API Response
   - Log value returned from backend to frontend.

   #### Stage G: UI Display
   - Log the raw value before rendering it in Chart of Accounts.
   - Ensure `fromCents()` is applied only once, and the final output matches expected currency format.

---

### üìå Additional Checks:

- Verify no hidden `value * 10`, `* 100`, or `.toFixed()` used anywhere in `useEffect`, mutations, or conditional render blocks.
- Check if input field is defined with `type="number"` and does not auto-format or round behind the scenes.
- Ensure `Number(value)` or `parseFloat(value)` isn't applied **after** the value is already processed by `toCents()`.

---

### ‚úÖ Required Outcome:

- `Input: 1` ‚Üí Stored: 100 ‚Üí Display: $1.00  
- `Input: 12` ‚Üí Stored: 1200 ‚Üí Display: $12.00  
- `Input: 123.45` ‚Üí Stored: 12345 ‚Üí Display: $123.45

---

‚ö†Ô∏è Until you validate and match each of these stages with debug logs, the bug will remain unresolved. Please complete a full end-to-end diagnostic pass and confirm at which exact stage the number is unintentionally transformed.

Once located, fix that specific layer and re-test all three cases.
