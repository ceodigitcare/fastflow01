üéØ OBJECTIVE:
Ensure all financial figures, balances, and calculations in the system are precise, synchronized, and runtime-correct ‚Äî especially across the Purchase Bill, Account Balances, and Payment Modules.


---


### üîß 1. FIX INCONSISTENT ACCOUNT BALANCES


- A new account ‚ÄúDBMB‚Äù was created under the **Cash & Bank** category with an **Initial Balance of $120.00**.
- However:
  - On the **Accounts Page**, it shows as `$1200.00`
  - In **Purchase Bill > Pay From Account**, it shows as `$12.00`
- This clearly indicates misinterpretation of currency units (possibly cents vs dollars).
- ‚úÖ Required Fix: Standardize the format and unit system across the app. If balances are stored in cents, properly convert before displaying. Display format should **always** be:  
  `USD ‚Äì 2 decimal digits only`.


---


### üîÑ 2. IMPLEMENT REAL-TIME ACCOUNT BALANCES


- Update the balance of each account in real-time, based on:
  - Initial Balance
  - Purchase Bills
  - Sales Invoices
  - Income/Expense Vouchers
- Ensure all accounts under **Cash & Bank** category reflect updated balance immediately after any transaction is saved.
- ‚úÖ Purpose: This will allow correct balance display in payment selection dropdowns and prevent overspending.


---


### üìâ 3. FIX "MAKE FULL PAYMENT" ROUNDING ERROR


- When clicking **Make Full Payment**, e.g. for a Total of `$305.31`, the Payment Made field auto-fills as `305.30609`
- This causes incorrect precision and may mark it ‚ÄúPaid‚Äù even though the value is not equal to total.
- ‚úÖ Fix:
  - All amounts must be precisely limited to **2 digits after the decimal (e.g., 305.31)**
  - Never show or save more than two decimal digits in any amount field.


---


### üî¢ 4. ENFORCE DECIMAL PRECISION SYSTEM-WIDE


- Standardize financial input and output to always use **two decimal places**.
- Apply this to:
  - Payment Made
  - Total Amount
  - Discounts
  - Runtime Account Balances
- Use this formatting:
  ```js
  parseFloat(value).toFixed(2)






‚úÖ 5. FINAL NOTES
The system is used for financial accounting ‚Äî all calculations must be exact and consistent.


Do not add or change UI elements at this stage.


Prioritize fixing all calculation and figure-related bugs first.
